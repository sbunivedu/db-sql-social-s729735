1. Find the names of all students who are friends with someone named Gabriel.
```
select f.name
  FROM Highschooler g , Highschooler f, Friend
  Where g.name = "Gabriel"
  AND g.ID = ID1
  AND ID2 = f.ID;
```
```
Expected output:
+-----------+
| name      |
+-----------+
| Jordan    |
| Alexis    |
| Cassandra |
| Andrew    |
| Jessica   |
+-----------+
```
2. Find all students who do not appear in the Likes table (as a student who
  likes or is liked) and return their names and grades.
```
select name , grade
  From Highschooler
  Where NOT ID IN (select ID1 from Likes)
  AND NOT ID IN (select ID2 from Likes);
```
```
Expected output:
+---------+-------+
| name    | grade |
+---------+-------+
| Jordan  |     9 |
| Tiffany |     9 |
| Logan   |    12 |
+---------+-------+
3 rows in set (0.01 sec)
```
3. (*) Find the name and grade of all students who are liked by more than one
  other student.
```
select name , grade
  From Highschooler , Likes lo , Likes ho
  Where ID = lo.ID2
  AND ID = ho.ID2
  AND lo.ID1 > ho.ID1;
```
```
Expected output:
+-----------+-------+
| name      | grade |
+-----------+-------+
| Cassandra |     9 |
| Kris      |    10 |
+-----------+-------+
2 rows in set (0.00 sec)
```
4. (*) For every student who likes someone 2 or more
  grades younger than themselves, return that student's name and grade, and the
  name and grade of the student they like. Note that your conditions in the
  where clause can include any arithmetic expressions, e.g. (a-b > 10) AND
  (c < d*2).
```
select n1.name , n1.grade , n2.name , n2.grade
  From Highschooler n1 , Highschooler n2, Likes
  Where n1.ID = Likes.ID1
  AND n2.ID = Likes.ID2
  AND ( n1.grade - n2.grade >= 2 );
```
```
Expected output:
+------+-------+-------+-------+
| name | grade | name  | grade |
+------+-------+-------+-------+
| John |    12 | Haley |    10 |
+------+-------+-------+-------+
1 row in set (0.00 sec)
```
5. (**) Find names and grades of students who only have friends in the same
  grade. Return the result sorted by grade, then by name within each grade.
  (what about students with no friends?)
```
select name , grade
  From Highschooler t 
  Where t.ID NOT IN (select ID1 
    From Friend , Highschooler h
    Where NOT t.grade = h.grade
    AND t.ID = Friend.ID1
    AND h.ID = Friend.ID2);
```
6. (***) For each student A who likes a student B where the two are not friends,
  find if they have a friend C in common (who can introduce them!). For all
  such trios, return the name and grade of A, B, and C.
```
select a.name , a.grade , b.name , b.grade , c.name , c.grade
  From Highschooler a , Highschooler b , Highschooler c, Likes , Friend fa , Friend fb
  Where a.ID = Likes.ID1
  AND b.ID = Likes.ID2
  
  AND a.ID = fa.ID1
  AND c.ID = fa.ID2
  AND b.ID = fb.ID2
  AND c.ID = fb.ID1
  
  AND NOT EXISTS (select * from Friend Where (a.ID = ID1 AND b.ID = ID2) or (A.ID = ID2 AND b.ID = ID1))
  
  AND NOT a.ID = b.ID
  AND NOT b.ID = fa.ID2
  AND NOT a.ID = fb.ID1;
```
7. (**) Find the difference between the number of students in the school and
  the number of different first names.

8. (**) What is the average number of friends per student? (Your result should
  be just one number.) Hint: consider divide-and-conquer in two steps:
  Find the number of friends of each student, which should results in a list
  of numbers. Find the average of the list of numbers from the previous step.
```
Expected output:
+-------------------------+
| avg friends per student |
+-------------------------+
|                  2.5000 |
+-------------------------+
1 row in set (0.00 sec)

```
9. (***) Find the number of students who are either friends with Cassandra or
  are friends of friends of Cassandra. Do not count Cassandra, even though
  technically she is a friend of a friend.
10. (***) Find the name and grade of the student(s) with the greatest number of
  friends.